package main

import (
	"log"
	"sync"
	"testing"
	"time"
	"project2/server"
	"project2/agent"
)

var serverStarted bool
var agentStarted bool
var mu sync.Mutex

type MockServer struct{}

func (m *MockServer) Start() {
	log.Println("[MockServer] Start() –≤—ã–∑–≤–∞–Ω")
	mu.Lock()
	serverStarted = true
	mu.Unlock()
	log.Println("[MockServer] serverStarted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true")
}

type MockAgent struct{}

func (m *MockAgent) Start() {
	log.Println("[MockAgent] Start() –≤—ã–∑–≤–∞–Ω")
	mu.Lock()
	agentStarted = true
	mu.Unlock()
	log.Println("[MockAgent] agentStarted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true")
}

func TestMainFunction(t *testing.T) {
	log.Println("===============================")
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ TestMainFunction")
	log.Println("===============================")

	// –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
	log.Println("[Setup] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
	originalServer := server.ActiveServer
	originalAgent := agent.ActiveAgent

	server.ActiveServer = &MockServer{}
	agent.ActiveAgent = &MockAgent{}
	log.Println("[Setup] –û–±—ä–µ–∫—Ç—ã –ø–æ–¥–º–µ–Ω–µ–Ω—ã Mock-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏")

	defer func() {
		log.Println("[Teardown] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
		server.ActiveServer = originalServer
		agent.ActiveAgent = originalAgent
	}()

	log.Println("[Execution] –ó–∞–ø—É—Å–∫ main() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ")
	go main()

	log.Println("[Execution] –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 100ms")
	time.Sleep(100 * time.Millisecond)

	mu.Lock()
	log.Println("[Verification] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ serverStarted –∏ agentStarted")
	log.Printf("[Status] serverStarted=%v, agentStarted=%v", serverStarted, agentStarted)
	if !serverStarted {
		t.Error("‚ùå –û—à–∏–±–∫–∞: server.StartServer() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
		log.Println("‚ùå –û—à–∏–±–∫–∞: server.StartServer() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	} else {
		log.Println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: server.StartServer() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	}
	if !agentStarted {
		t.Error("‚ùå –û—à–∏–±–∫–∞: agent.StartAgent() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
		log.Println("‚ùå –û—à–∏–±–∫–∞: agent.StartAgent() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	} else {
		log.Println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: agent.StartAgent() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	}
	mu.Unlock()

	log.Println("===============================")
	log.Println("üéâ ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ")
	log.Println("===============================")
}