package main

import (
	"log"
	"os"
	"sync"
	"testing"
	"time"
	"project2/server"
	"project2/agent"

	"github.com/joho/godotenv"
)

var serverStarted bool
var agentStarted bool
var mu sync.Mutex

type MockServer struct{}

func (m *MockServer) Start() {
	log.Println("[MockServer] Start() –≤—ã–∑–≤–∞–Ω")
	mu.Lock()
	serverStarted = true
	mu.Unlock()
	log.Println("[MockServer] serverStarted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true")
}

type MockAgent struct{}

func (m *MockAgent) Start() {
	log.Println("[MockAgent] Start() –≤—ã–∑–≤–∞–Ω")
	mu.Lock()
	agentStarted = true
	mu.Unlock()
	log.Println("[MockAgent] agentStarted —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true")
}

// TestMainFunction —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ main() —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å Start() –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∞–≥–µ–Ω—Ç–∞.
func TestMainFunction(t *testing.T) {
	log.Println("===============================")
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ TestMainFunction")
	log.Println("===============================")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	log.Println("üìå –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env:")
	log.Printf("SERVER_PORT: %s", os.Getenv("SERVER_PORT"))
	log.Printf("AGENT_WORKERS: %s", os.Getenv("AGENT_WORKERS"))
	log.Printf("TIME_ADDITION_MS: %s", os.Getenv("TIME_ADDITION_MS"))
	log.Printf("TIME_SUBTRACTION_MS: %s", os.Getenv("TIME_SUBTRACTION_MS"))
	log.Printf("TIME_MULTIPLICATIONS_MS: %s", os.Getenv("TIME_MULTIPLICATIONS_MS"))
	log.Printf("TIME_DIVISIONS_MS: %s", os.Getenv("TIME_DIVISIONS_MS"))

	// –ü–æ–¥–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
	log.Println("[Setup] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
	originalServer := server.ActiveServer
	originalAgent := agent.ActiveAgent

	server.ActiveServer = &MockServer{}
	agent.ActiveAgent = &MockAgent{}
	log.Println("[Setup] –û–±—ä–µ–∫—Ç—ã –ø–æ–¥–º–µ–Ω–µ–Ω—ã Mock-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏")

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
	defer func() {
		log.Println("[Teardown] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
		server.ActiveServer = originalServer
		agent.ActiveAgent = originalAgent
	}()

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è main()
	done := make(chan bool)

	log.Println("[Execution] –ó–∞–ø—É—Å–∫ main() –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ")
	go func() {
		main() // –ó–∞–ø—É—Å–∫ –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
		done <- true // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 100ms
	log.Println("[Execution] –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 100ms")
	time.Sleep(100 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ serverStarted –∏ agentStarted
	mu.Lock()
	log.Println("[Verification] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ serverStarted –∏ agentStarted")
	log.Printf("[Status] serverStarted=%v, agentStarted=%v", serverStarted, agentStarted)

	if !serverStarted {
		t.Error("‚ùå –û—à–∏–±–∫–∞: server.StartServer() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
		log.Println("‚ùå –û—à–∏–±–∫–∞: server.StartServer() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	} else {
		log.Println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: server.StartServer() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	}

	if !agentStarted {
		t.Error("‚ùå –û—à–∏–±–∫–∞: agent.StartAgent() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
		log.Println("‚ùå –û—à–∏–±–∫–∞: agent.StartAgent() –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	} else {
		log.Println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: agent.StartAgent() –±—ã–ª –≤—ã–∑–≤–∞–Ω")
	}

	mu.Unlock()

	log.Println("===============================")
	log.Println("üéâ ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ")
	log.Println("===============================")
}
